"use strict";
self["webpackHotUpdatehackathon_stephanakashelvira"]("Button-stories",{

/***/ "./stories/Button.stories.js":
/*!***********************************!*\
  !*** ./stories/Button.stories.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Large: () => (/* binding */ Large),
/* harmony export */   Primary: () => (/* binding */ Primary),
/* harmony export */   Secondary: () => (/* binding */ Secondary),
/* harmony export */   Small: () => (/* binding */ Small),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ "./stories/Button.jsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");

 // Assuming Button component is correctly imported and located

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Example/Button",
  component: _Button__WEBPACK_IMPORTED_MODULE_1__["default"],
  argTypes: {
    backgroundColor: {
      control: "color"
    }
  },
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: '#root',
      // Show the individual axe-rules as Nightwatch assertions (can be verbose if there are many violations)
      runAssertions: false,
      // Show the complete Accessibility test report (by default, only rule violations will be shown)
      verbose: false,
      config: {
        rules: [{
          // The autocomplete rule will not run based on the CSS selector provided
          id: 'autocomplete-valid',
          selector: '*:not([autocomplete="nope"])'
        }, {
          // Setting the enabled option to false will disable checks for this particular rule on all stories.
          id: 'image-alt',
          enabled: false
        }, {
          id: 'input-button-name',
          enabled: true
        }, {
          id: 'color-contrast',
          enabled: true
        }]
      },
      options: {},
      manual: true
    }
  }
});
const Template = args => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_1__["default"], {
  ...args
});
Template.displayName = "Template";
const Primary = Template.bind({});
Primary.args = {
  primary: true,
  label: 'Button'
};
const Secondary = Template.bind({});
Secondary.args = {
  label: 'Button'
};
const Large = Template.bind({});
Large.args = {
  size: 'large',
  label: 'Button'
};
const Small = Template.bind({});
Small.args = {
  size: 'small',
  label: 'Button'
};
Primary.parameters = {
  ...Primary.parameters,
  docs: {
    ...Primary.parameters?.docs,
    source: {
      originalSource: "args => <Button {...args} />",
      ...Primary.parameters?.docs?.source
    }
  }
};
Secondary.parameters = {
  ...Secondary.parameters,
  docs: {
    ...Secondary.parameters?.docs,
    source: {
      originalSource: "args => <Button {...args} />",
      ...Secondary.parameters?.docs?.source
    }
  }
};
Large.parameters = {
  ...Large.parameters,
  docs: {
    ...Large.parameters?.docs,
    source: {
      originalSource: "args => <Button {...args} />",
      ...Large.parameters?.docs?.source
    }
  }
};
Small.parameters = {
  ...Small.parameters,
  docs: {
    ...Small.parameters?.docs,
    source: {
      originalSource: "args => <Button {...args} />",
      ...Small.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["Primary", "Secondary", "Large", "Small"];

/***/ })

});